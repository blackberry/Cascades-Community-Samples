/* Copyright (c) 2012 Research In Motion Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Additional code includes
 */
#include <bb/cascades/QmlDocument>
#include <bb/cascades/NavigationPane>
#include <bb/cascades/Page>
#include <bb/cascades/Button>
#include <bb/cascades/TextArea>

#include <stdio.h>

#include "app.hpp"
#include "CustomException.hpp"

/**
 * This application demonstrates how to create custom exceptions
 * and log information to the log file.
 */


/**
 * Constructor
 *
 * Initial setup so that we can handle the events generated by UI components, and update
 * the content of UI accordingly.
 */

App::App()
    : m_mainPage(0),
      m_logTextArea(0)
{

    // Here we create a QML object and load it.
    QmlDocument* qml = QmlDocument::create("main.qml");
    qml->setContextProperty("cs", this);

    if (!qml->hasErrors())
    {

        // The application Page is created from QML.
        m_mainPage = qml->createRootNode<Page>();

        if (m_mainPage)
        {

            if (connectButtons())
            {
                m_logTextArea = m_mainPage->findChild<TextArea*>("logTextArea");
                m_logTextArea->resetText();

                // Finally the main scene for the application is set the Page.
                Application::setScene(m_mainPage);
            }
        }
    }

}

/**
 * Destructor
 *
 */
App::~App()
{
    // void
}

/**
 * App::connectButtons()
 *
 * Set up event handler to handle "clicked" events from UI buttons
 */
bool App::connectButtons()
{

    if (m_mainPage)
    {
        //Get a handle on our buttons from the QML file.
        Button* generateExceptionButton = m_mainPage->findChild<Button*>("generateExceptionButton");
        Button* clearLogButton = m_mainPage->findChild<Button*>("clearLogButton");

        if (generateExceptionButton && clearLogButton)
        {
            //Connect our slots
            return QObject::connect(generateExceptionButton, SIGNAL(clicked()), this, SLOT(onGenerateExceptionButtonClicked())) &&
                   QObject::connect(clearLogButton, SIGNAL(clicked()), this, SLOT(onClearLogButtonClicked()));
        }
    }
    return false;

}

/**
 * App::onGenerateExceptionButtonClicked()
 *
 * The event handler for "clicked" event from "Generate Exception" Button
 *
 */
void App::onGenerateExceptionButtonClicked()
{

    //Generate a CustomException exception, which is logged in the system's log file
    generateException();

    //Load the system's log file into a QString
    QString logContents = loadLogFile();

    //Display the log file into the application's main TextArea
    displayLog(logContents);

}

/**
 * App::onClearLogButtonClicked()
 *
 * The event handler for "clicked" event from 'Clear" button
 */
void App::onClearLogButtonClicked()
{
    if (m_logTextArea)
    {
        m_logTextArea->resetText();
    }
}

/**
 * App::testThrow()
 *
 * A help function to simulate that a custom exception is thrown.
 */
void App::testThrow()
{
    throw CustomException("CustomException thrown and logged!");

}

/**
 * App::generateException()
 *
 * Force to generate an exception and catch it.
 */
void App::generateException()
{
    try
    {
        testThrow();
    }
    catch (CustomException e)
    {
        e.logExceptionAsWarning();
    }
    catch (...) //NOTE: Qt cannot handle custom exceptions outside slots. Catch-all required.
    {
        qWarning() << "Unhandled exception detected!\n";
    }
}

/**
 * App::loadLogFile()
 *
 * Retrieve the content of the log file
 */
QString App::loadLogFile()
{
    //C-Style loading file into buffer...

    FILE* pFile;
    char* buffer;
    long lSize;
    size_t result;

    pFile = fopen("logs/log", "r");

    if (pFile == 0)
    {
        fputs("Reading error", stderr);
        return QString("Reading error");
    }

    fseek(pFile, 0, SEEK_END);
    lSize = ftell(pFile);
    rewind(pFile);

    buffer = (char*) malloc(sizeof(char*)*lSize);
    result = fread(buffer, 1, lSize, pFile);

    if (result != lSize)
    {
        fputs("Reading error", stderr);
        return QString("Reading error");
    }

    QString logString(buffer);

    fclose(pFile);
    free(buffer);

    //Return out QString with proper log file contents
    return logString;
}

/**
 * App::displayLog(QString& textContents)
 *
 * update UI textarea with the content from the log.
 */
void App::displayLog(QString& textContents)
{
    if (m_logTextArea)
    {
        m_logTextArea->setText(textContents.toStdString().c_str());
    }
}






